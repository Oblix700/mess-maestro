
'use client';

import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Button } from '@/components/ui/button';
import { Pencil, PlusCircle, Trash2 } from 'lucide-react';
import React, { useState, useEffect } from 'react';
import type { User, Unit } from '@/lib/types';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';
import { users as initialUsers, units as initialUnits } from '@/lib/data';
import { Badge } from '@/components/ui/badge';

export default function UsersPage() {
  const [users, setUsers] = useState<User[]>(initialUsers);
  const [units, setUnits] = useState<Unit[]>(initialUnits);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [selectedUser, setSelectedUser] = useState<User | null>(null);
  const { toast } = useToast();

  const handleEditClick = (user: User) => {
    setSelectedUser(user);
    setIsEditDialogOpen(true);
  };

  const handleDeleteClick = (user: User) => {
    setSelectedUser(user);
    setIsDeleteDialogOpen(true);
  };

  const handleAddClick = () => {
    setSelectedUser({ id: '', name: '', role: 'mess_staff' });
    setIsEditDialogOpen(true);
  }

  const handleSaveUser = () => {
    if (!selectedUser) return;

    if (users.some(u => u.id === selectedUser.id && selectedUser.id !== (isEditDialogOpen ? selectedUser.id : ''))) {
        toast({ variant: "destructive", title: "Error", description: "A user with this Service ID already exists." });
        return;
    }

    if (selectedUser.id) { // This is a stand-in for checking if it's an existing user
        // Update user
        setUsers(users.map((u) => (u.id === selectedUser.id ? selectedUser : u)));
        toast({ title: "Success", description: "User updated successfully." });
    } else {
        // Add new user
        // In a real app, the ID would be generated by the backend
        const newUser = { ...selectedUser, id: `temp-${Date.now()}` };
        setUsers([...users, newUser]);
        toast({ title: "Success", description: "User added successfully." });
    }

    setIsEditDialogOpen(false);
    setSelectedUser(null);
  };

  const handleDeleteUser = () => {
    if (!selectedUser) return;
    setUsers(users.filter((u) => u.id !== selectedUser.id));
    toast({ title: "Success", description: "User deleted successfully." });
    setIsDeleteDialogOpen(false);
    setSelectedUser(null);
  };

  const handleFieldChange = (field: keyof Omit<User, 'id'>, value: any) => {
    if (selectedUser) {
      setSelectedUser({ ...selectedUser, [field]: value });
    }
  };
  
  const getUnitName = (kitchenId?: string) => {
    if (!kitchenId) return 'N/A';
    const unit = units.find(u => u.id === kitchenId);
    return unit ? `${unit.name} - ${unit.mess}` : 'Unknown Unit';
  };

  return (
    <>
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>User Management</CardTitle>
              <CardDescription>
                Add, edit, or remove users who can access the system.
              </CardDescription>
            </div>
            <Button size="sm" className="gap-1" onClick={handleAddClick}>
              <PlusCircle className="h-4 w-4" />
              Add User
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          <div className="relative h-[calc(100vh-14rem)] overflow-auto border rounded-md">
            <Table>
              <TableHeader className="sticky top-0 bg-card z-10">
                <TableRow>
                  <TableHead>Name</TableHead>
                  <TableHead>Service ID</TableHead>
                  <TableHead>Role</TableHead>
                  <TableHead>Assigned Unit</TableHead>
                  <TableHead>
                    <span className="sr-only">Actions</span>
                  </TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {users.map((user) => (
                  <TableRow key={user.id}>
                    <TableCell className="font-medium">{user.name}</TableCell>
                    <TableCell className="font-mono text-xs">{user.id}</TableCell>
                    <TableCell>
                        <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>
                            {user.role}
                        </Badge>
                    </TableCell>
                    <TableCell>{user.role === 'mess_staff' ? getUnitName(user.kitchenId) : 'N/A'}</TableCell>
                    <TableCell>
                      <div className="flex justify-end gap-2">
                        <Button
                            size="icon"
                            variant="ghost"
                            onClick={() => handleEditClick(user)}
                        >
                            <Pencil className="h-4 w-4" />
                            <span className="sr-only">Edit</span>
                        </Button>
                        <Button
                            size="icon"
                            variant="ghost"
                            onClick={() => handleDeleteClick(user)}
                            className="text-destructive hover:text-destructive"
                        >
                            <Trash2 className="h-4 w-4" />
                            <span className="sr-only">Delete</span>
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>

      {/* Edit/Add Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>{selectedUser && users.some(u => u.id === selectedUser.id) ? 'Edit User' : 'Add User'}</DialogTitle>
            <DialogDescription>
              {selectedUser && users.some(u => u.id === selectedUser.id) ? 'Make changes to the user details.' : 'Add a new user to the system.'}
            </DialogDescription>
          </DialogHeader>
          {selectedUser && (
            <div className="grid gap-4 py-4">
                 <div className="grid grid-cols-4 items-center gap-4">
                    <Label htmlFor="name" className="text-right">Name</Label>
                    <Input id="name" value={selectedUser.name} onChange={(e) => handleFieldChange('name', e.target.value)} className="col-span-3" />
                </div>
                 <div className="grid grid-cols-4 items-center gap-4">
                    <Label htmlFor="id" className="text-right">Service ID</Label>
                    <Input id="id" value={selectedUser.id} onChange={(e) => setSelectedUser({...selectedUser, id: e.target.value})} className="col-span-3" />
                </div>
                <div className="grid grid-cols-4 items-center gap-4">
                    <Label htmlFor="role" className="text-right">Role</Label>
                    <Select value={selectedUser.role} onValueChange={(value: 'admin' | 'mess_staff') => handleFieldChange('role', value)}>
                        <SelectTrigger className="col-span-3">
                            <SelectValue placeholder="Select a role" />
                        </SelectTrigger>
                        <SelectContent>
                            <SelectItem value="admin">Admin</SelectItem>
                            <SelectItem value="mess_staff">Mess Staff</SelectItem>
                        </SelectContent>
                    </Select>
                </div>
                {selectedUser.role === 'mess_staff' && (
                    <div className="grid grid-cols-4 items-center gap-4">
                        <Label htmlFor="kitchenId" className="text-right">Unit / Mess</Label>
                        <Select value={selectedUser.kitchenId || ''} onValueChange={(value) => handleFieldChange('kitchenId', value)}>
                            <SelectTrigger className="col-span-3">
                                <SelectValue placeholder="Select a unit" />
                            </SelectTrigger>
                            <SelectContent>
                                {units.map(unit => (
                                    <SelectItem key={unit.id} value={unit.id!}>{getUnitName(unit.id)}</SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                    </div>
                )}
            </div>
          )}
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsEditDialogOpen(false)}>Cancel</Button>
            <Button onClick={handleSaveUser}>Save Changes</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <AlertDialog
        open={isDeleteDialogOpen}
        onOpenChange={setIsDeleteDialogOpen}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
            <AlertDialogDescription>
              This action cannot be undone. This will permanently delete the user's account and remove their access.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDeleteUser}
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}

